
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.speech'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'io.github.cdimascio:dotenv-java:2.3.0'
	implementation 'com.google.code.gson:gson:2.8.9'
	implementation 'org.json:json:20231013'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//jjwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//lombok and sql
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

//	implement for test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}
javadoc {
	source = fileTree('src/main/java').matching {
		include 'com/speech/up/board/controller/**'
		include 'com/speech/up/record/controller/**'
		include 'com/speech/up/reply/controller/**'
		include 'com/speech/up/script/controller/**'
		include 'com/speech/up/user/controller/**'
		include 'com/speech/up/demo/**'
	}
	destinationDir = layout.buildDirectory.dir("docs/javadoc").get().asFile
}
bootJar{
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
	useJUnitPlatform() // JUnit 5를 사용하는 경우
	include '**/*Test.class'
}